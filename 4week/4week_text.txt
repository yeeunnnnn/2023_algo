1191

1) 이진 트리를 배열로 구현하고, 전위 순회(Preorder), 중위 순회(Inorder), 후위 순회(Postorder) 방법으로 트리를 순회하여 출력하는 프로그램입니다. 사용자로부터 입력을 받아 이진 트리를 생성하고, 순회 함수들을 호출하여 결과를 출력


2) 1. 입력: 
   - n: 이진 트리의 노드 개수
   - a, b, c: 각 노드의 정보 (데이터, 왼쪽 자식, 오른쪽 자식)

2. Node 구조체 정의:
   struct Node {
       char data;
       int left;
       int right;
   };

3. makeBTreeNode 함수:
   - Node 구조체를 초기화하여 새로운 노드를 생성합니다.

4. makeLC 함수:
   - 부모 노드에게 왼쪽 자식 노드를 설정합니다.

5. makeRC 함수:
   - 부모 노드에게 오른쪽 자식 노드를 설정합니다.

6. Preorder 함수:
   - 전위 순회를 수행하여 노드의 데이터를 출력합니다.

7. Inorder 함수:
   - 중위 순회를 수행하여 노드의 데이터를 출력합니다.

8. Postorder 함수:
   - 후위 순회를 수행하여 노드의 데이터를 출력합니다.

9. 메인 함수 main:
   - n을 입력받고, n개의 노드 정보를 입력받아 이진 트리를 생성합니다.
   - 생성한 이진 트리를 전위, 중위, 후위 순회하여 결과를 출력합니다.
   - 동적으로 할당된 메모리를 해제하고 프로그램을 종료합니다.



9372

1) T개의 테스트 케이스를 입력받고, 각 테스트 케이스마다 N과 M을 입력받습니다. 그 후 M개의 쌍(a, b)을 입력받고, 각 테스트 케이스마다 N - 1을 출력하는 간단한 프로그램입니다.

입력받는 쌍(a, b)은 무방향 그래프의 간선 정보를 나타내는 것으로 보입니다. 간선 정보를 모두 입력받는 이유는 그래프의 연결 여부를 확인할 필요 없이, 그래프가 연결 그래프인 경우 (N-1)개의 간선만 있으면 트리가 될 수 있다는 성질을 이용하여 트리의 간선 개수인 (N-1)을 출력하고 있습니다.

2) 1. 입력:
   - T: 테스트 케이스 개수
   - N, M: 각 테스트 케이스마다 노드 개수와 간선 개수
   - a, b: 무방향 그래프의 간선 정보

2. 메인 함수 main:
   - T를 입력받습니다.
   - T만큼 반복하는 while 루프를 실행합니다.
   - 각 테스트 케이스마다 N과 M을 입력받습니다.
   - M개의 쌍(a, b)을 입력받습니다. (간선 정보 입력)
   - 각 테스트 케이스마다 N - 1을 출력합니다.



9934
1) 주어진 트리를 특정 방식으로 순회하여 출력하는 프로그램입니다. 입력으로 주어지는 k는 트리의 높이를 의미하며, 2^k - 1 개의 노드 값을 입력받습니다. 그 후에 주어진 트리를 특정 순서로 순회하여 결과를 출력합니다.

이 코드에서는 주어진 트리를 재귀적으로 중위 순회하는 방식으로 순회하며, 순회한 결과를 answer 배열에 저장한 후 출력합니다.

2) 1. 입력:
   - k: 트리의 높이를 나타내는 변수
   - k2: 2^k - 1 값을 저장하는 변수
   - tree: 트리의 노드 값을 저장하는 배열
   - answer: 트리를 순회한 결과를 저장하는 2차원 배열
   - ind: 현재 노드 값을 저장할 answer 배열의 인덱스

2. find 함수:
   - 중위 순회를 수행하는 재귀 함수입니다.
   - 현재 노드 값을 answer 배열에 저장하고, 왼쪽 서브트리와 오른쪽 서브트리를 순회합니다.

3. 메인 함수 main:
   - k를 입력받습니다.
   - k2를 계산하여 초기화합니다.
   - k2만큼 반복하여 트리의 노드 값을 입력받습니다.
   - find 함수를 호출하여 주어진 트리를 순회하고, 결과를 answer 배열에 저장합니다.
   - answer 배열의 각 행을 순회하며 순회 결과를 출력합니다.



11286
1) 최소 힙(Min Heap)을 구현하고, 주어진 명령에 따라 힙에 값을 추가하거나 최소 값을 삭제하여 결과를 출력하는 프로그램입니다. 힙은 부모 노드가 자식 노드보다 항상 작은 값을 가지는 이진 트리입니다.

입력으로 주어지는 명령은 다음과 같습니다.

0: 힙에서 최소 값을 삭제(pop)하고, 해당 값을 결과 배열에 저장합니다.
양의 정수: 해당 값을 힙에 추가(push)합니다.

2) 1. 힙 구현:
   - 최소 힙(Min Heap)을 배열로 구현합니다. 배열의 첫 번째 원소를 최소 값으로 유지합니다.
   - push 함수: 주어진 값을 힙에 추가합니다.
   - pop 함수: 힙에서 최소 값을 삭제합니다.

2. 메인 함수 main:
   - 입력: 
     - N: 명령의 개수
     - cmd: 명령 (0 또는 양의 정수)
   - ans 배열: 최소 값을 순서대로 저장하기 위한 배열
   - ansIdx: 결과 배열의 인덱스 변수

3. N번 반복하는 반복문:
   - cmd를 입력받습니다.
   - switch 문을 사용하여 명령에 따라 처리합니다.
     - cmd가 0인 경우:
       - 힙에서 최소 값을 삭제(pop)하고, 해당 값을 ans 배열에 저장합니다.
     - 그 외의 경우 (양의 정수인 경우):
       - 주어진 값을 힙에 추가(push)합니다.

4. 결과 출력:
   - ans 배열을 순회하며 저장된 최소 값을 출력합니다.



11725
1) 입력으로 주어진 연결 정보를 바탕으로 각 노드의 부모 노드를 찾아 출력하는 프로그램입니다. 주어진 입력은 트리의 연결 정보를 나타내는 것으로, 각 노드들이 서로 양방향으로 연결되어 있습니다. 이를 이용하여 각 노드의 부모 노드를 찾아내고, 결과를 출력합니다.

2) 1. 입력:
   - N: 노드의 개수를 나타내는 변수
   - link: 노드들 간의 연결 정보를 저장하는 2차원 배열
   - parent: 각 노드의 부모 노드를 저장하는 배열

2. find_parent 함수:
   - 재귀 함수로 구현된 트리 순회 함수입니다.
   - 주어진 노드의 자식 노드를 찾아가며 각 노드의 부모 노드를 설정합니다.

3. print_parent 함수:
   - 각 노드의 부모 노드를 출력합니다.

4. 메인 함수 main:
   - N을 입력받습니다.
   - N - 1개의 연결 정보를 입력받습니다. (트리의 간선 정보 입력)
   - find_parent 함수를 호출하여 각 노드의 부모 노드를 찾습니다.
   - print_parent 함수를 호출하여 결과를 출력합니다.

